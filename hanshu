//自定义一个函数，求出两个数的最大值
int get_max(int x, int y)
{
	if (x > y)
		return x;
	else
		return y;
}
int main()
{
	int a = 10;
	int b = 20;
	int max = get_max(a, b);									
	printf("max = %d\n", max);
	return 0;
}



 //写一个函数交换a，b里的值
//void Swap1(int x, int y)  //该函数写法是错误的，实际并不能交换a，b的值。不用返回值，用void
////当实参传给形参的时候，形参其实是形参的一份拷贝
////对形参的改变是不会改变实参的
//{
//	int tmp = 0;
//	tmp = x;
//	x = y;
//	y = tmp;
//}
void Swap2(int* pa, int* pb)
{
	int tmp = 0;
	tmp = *pa;
	*pa = *pb;
	*pb = tmp;
}
int main()
{
	int a = 10;
	int b = 20;
	//Swap1(a, b);
	Swap2(&a, &b);	//调用swap2函数
	printf("a = %d, b = %d\n", a, b);
	return 0;
}



//找出100到200之间的素数
#include <math.h>
int is_prime(int n)
{
	int j = 0;
	for(j = 2; j<=sqrt(n); j++)	//sqrt开平方
	{
		if(n%j ==0)
			return 0;
	}
	return 1;
}
int main()
{
	int i = 0;
	for(i = 100; i<=200; i++)
	{
		if(is_prime(i) == 1)
			printf("%d ", i);
	}
	return 0;
}


//写一个函数判断闰年
int is_leap_year(int y)
{
	if((y%4 == 0 && y%100 != 0) || (y%400 == 0))
		return 1;
	else
		return 0;
}
int main()
{
	int year = 0;
	for(year = 1000; year<=2000; year++)
	{
		if(1 ==is_leap_year(year))
		{
			printf("%d ", year);
		}
	}
	return 0;
}



//写一个函数，每调用一次这个函数，就会将num的值加一
void Add(int* p)
{
	(*p)++;	//*p要扩起来
}
int main()
{
	int num = 0;
	Add(&num);
	printf("%d\n", num);
	Add(&num);
	printf("%d\n", num);
	Add(&num);
	printf("%d\n", num);
	return 0;
}



//求第n个斐波那契数   1,1,2,3,5,8,13,21,34,55....
//int Fit(int n)
//{
//	if(n<3)
//	{
//		return 1;
//	}
//	else
//	{
//		return Fit(n-1)+Fit(n-2);
//	}
//}
////第一种用递归的方法，计算量过大，如果n为50，计算量将达到上亿
////50
////49 48
////48 47 47 46
////47 46 46 45 46 45 45 44
////........   指数级增长

//第二种用循环的方法
int Fit(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n>2)
	{
		c = a+b;
		a = b;
		b = c;
		n--;	
	}
	return c;
}
int main()
{
	int ret = 0;
	int n = 0;
	scanf("%d", &n);
	ret = Fit(n);
	printf("%d\n", ret);
	return 0;
}






//函数与递归
//接受一个整形值（无符号），按照顺序打印他的每一位，例如：输入：1234，输出：1 2 3 4
void print(int n)
{
	if(n>9)
	{
		print(n/10);
	}
	printf("%d ", n%10);
}
int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	print(num);
	return 0;
}


////编写函数，求字符串长度
//int my_strlen(char* str)
//{
//	int count = 0;
//	while(*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//编写函数，不允许创建临时变量，求字符串长度
//递归的方法
//大事化小
//my_strlen("bit")
//1+my_strlen("it")
//1+1+my_strlen("t")
//1+1+1+my_strlen("\0")
//1+1+1+0
//3
int my_strlen(char* str)
{
	if(*str != '\0')
		return 1+my_strlen(str+1);
	else return 0;
}
int main()
{
	char arr[] = "hello";    //hello\0
	int len = my_strlen(arr);//arr是数组，数组传参，传过去的不是整个数组，而是数组第一个元素的地址
	printf("len = %d", len);
	return 0;
}





//求n的阶乘
int Fac(int n)
{
	if(n<=1)
		return 1;
	else
		return n*Fac(n-1);   
}
int main()
{
	int ret = 0;
	int n = 0;
	scanf("%d", &n);
	ret = Fac(n);
	printf("a = %d\n", a);
	return 0;
}
